- Introduction
	- Content / goal: How to write cleaner and safer shell code
	- Why care?
		- Use in Make, Docker, system(), cron, ...
		- Speedup in everyday tasks
		- Small programs
	- Table of contents / structure

- Drivers' license to Bash
	- Quotes
	- Arrays

- Good practices (here is where we can cut a bit):
	- functions (maybe `local -`)
	- "Use what Bash provides!"
		- shopt, set
		- { } for grouping
		- ( ) for throwaway-environments (set, shopt, env, variables)
		- (( ))
		- <( )
		- << and <<<
		- [[ ]]
		- ${var//str/repl} etc.
		- $' '
		- ?( ), *( ) etc.
	- "Use it properly!"
		- "if" not necessarily needs [Â ]
		- [ -z ... ] -> [ ... != "" ]
		- useful program options, like grep -q, mkdir -p and rm -f
	- Use set -e (-uo pipefail) (+ counterexample)
	- trap just on EXIT

- Pitfalls:
	- $10
	- backslashes inside ` `
	- overwrite global variables -> use declare or local
	- echo or not using -- -> use printf or --
	- Pipes lead to subshells -> in the worst case use `< <(pipe) read -rd '' s`


- REMARKS:
	- Fine structure:
		- optionally: Problem
		- Explanation
		- optionally: Examples, details
